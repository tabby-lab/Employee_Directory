{"version":3,"sources":["components/Table.js","utils/api.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","className","scope","onClick","handleOnSubmit","employeeList","map","person","id","key","src","picture","thumbnail","name","first","last","email","phone","axios","get","Search","type","value","search","onChange","handleInputChange","App","state","originalList","event","target","setState","console","log","newEmployeeList","filter","toLowerCase","indexOf","colName","sort","a","b","localeCompare","Api","then","results","data","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2QAkEeA,G,MA9DD,SAACC,GACX,OACI,yBAAKC,UAAU,aACX,2BAAOA,UAAU,sBAEb,2BAAOA,UAAU,cACb,4BACI,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,WACA,wBAAIA,MAAM,MAAMC,QAAS,WACrBH,EAAMI,eAAe,WADzB,SAGA,wBAAIF,MAAM,MAAMC,QAAS,WACrBH,EAAMI,eAAe,UADzB,QAGA,wBAAIF,MAAM,OAAV,SAIA,wBAAIA,MAAM,OAAV,WAGR,+BAGQF,EAAMK,aAAaC,KAAI,SAACC,EAAQC,GAC5B,OACI,wBAAIC,IAAKD,GACL,4BACKA,GAEL,4BACI,yBAAKE,IAAKH,EAAOI,QAAQC,aAE7B,4BACKL,EAAOM,KAAKC,OAGjB,4BACKP,EAAOM,KAAKE,MAGjB,4BACKR,EAAOS,OAGZ,4BACKT,EAAOU,gB,iBCjDjC,EACK,WACZ,OAAOC,IAAMC,IAAI,2CCMVC,EARA,SAACpB,GACZ,OACI,yBAAKC,UAAU,aAAf,WACY,2BAAOoB,KAAM,OAAOR,KAAM,SAAUS,MAAQtB,EAAMuB,OAAQC,SAAUxB,EAAMyB,kBAAmBxB,UAAU,mBCyD5GyB,E,4MAtDbC,MAAQ,CACNtB,aAAc,GACduB,aAAc,GACdL,OAAQ,I,EAGVE,kBAAoB,SAAAI,GAAU,IAAD,EACHA,EAAMC,OAAtBjB,EADmB,EACnBA,KAAMS,EADa,EACbA,MACd,EAAKS,SAAL,eACGlB,EAAOS,IAEVU,QAAQC,IAAI,QAASX,GAGrB,IAAIY,EAAkB,EAAKP,MAAMC,aAAaO,QAAO,SAAA5B,GACnD,OAAOA,EAAOM,KAAKC,MAAMsB,cAAcC,QAAQf,EAAMc,gBAAkB,GAAK7B,EAAOM,KAAKE,KAAKqB,cAAcC,QAAQf,EAAMc,gBAAkB,KAG7I,EAAKL,SAAS,CACZ1B,aAAc6B,K,EAIlB9B,eAAiB,SAAAkC,GACf,IAAIJ,EAAkB,EAAKP,MAAMtB,aAAakC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE3B,KAAKyB,GAASI,cAAcD,EAAE5B,KAAKyB,OAElG,EAAKP,SAAS,CACZ1B,aAAc6B,K,kEAMG,IAAD,OAClBS,IAAsBC,MAAK,SAAAC,GACzBb,QAAQC,IAAI,QAASY,GACrB,EAAKd,SAAS,CACZ1B,aAAcwC,EAAQC,KAAKD,QAC3BjB,aAAciB,EAAQC,KAAKD,e,+BAM/B,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,CAAQsB,OAAQwB,KAAKpB,MAAMJ,OAAQE,kBAAmBsB,KAAKtB,oBAC3D,kBAAC,EAAD,CAAOpB,aAAc0C,KAAKpB,MAAMtB,aAAcD,eAAgB2C,KAAK3C,sB,GAhDzD4C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.dc32333c.chunk.js","sourcesContent":["import React from 'react'\n// import Col from './Col'\n// import Row from './Row'\n\nconst Table = (props) => {\n    return (\n        <div className=\"container\">\n            <table className=\"table table-hover \">\n\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">picture</th>\n                        <th scope=\"col\" onClick={()=>{\n                            props.handleOnSubmit(\"first\")\n                        }}>First</th>\n                        <th scope=\"col\" onClick={()=>{\n                            props.handleOnSubmit(\"last\")\n                        }}>Last</th>\n                        <th scope=\"col\">email</th>\n                        {/*   <th scope =\"col\" onClick={()=>{\n                            props.handleOnSubmit(\"email\")\n                        }}>Email</th> */}\n                        <th scope=\"col\">phone</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n\n                        props.employeeList.map((person, id) => {\n                            return (\n                                <tr key={id}>\n                                    <td>\n                                        {id}\n                                    </td>\n                                    <td>\n                                        <img src={person.picture.thumbnail} />\n                                    </td>\n                                    <td>\n                                        {person.name.first}\n                                    </td>\n\n                                    <td>\n                                        {person.name.last}\n                                    </td>\n\n                                    <td>\n                                        {person.email}\n                                    </td>\n\n                                    <td>\n                                        {person.phone}\n                                    </td>\n                                </tr>\n                            )\n\n                        })\n\n\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Table\n","import axios from \"axios\"\n\nexport default {\n    getRandomPeople:function(){\n        return axios.get(\"https://randomuser.me/api/?results=100\")\n    }\n}","import React from 'react'\n\nconst Search = (props) => {\n    return (\n        <div className=\"container\">\n            search: <input type =\"text\" name= \"search\"  value= {props.search} onChange={props.handleInputChange} className=\"form-control\" />\n        </div>\n    )\n}\n\nexport default Search\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './components/Table'\nimport Api from './utils/api.js'\nimport Search from './components/Search'\n// import api from './utils/api.js';\n   \nclass App extends Component {\n  state = {\n    employeeList: [],\n    originalList: [],\n    search: \"\"\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target\n    this.setState({\n      [name]: value  //search: \"phil\"\n    })\n    console.log('value', value)\n\n\n    let newEmployeeList = this.state.originalList.filter(person => {\n      return person.name.first.toLowerCase().indexOf(value.toLowerCase()) > -1 || person.name.last.toLowerCase().indexOf(value.toLowerCase()) > -1\n    })\n\n    this.setState({\n      employeeList: newEmployeeList\n    })\n  }\n\n  handleOnSubmit = colName => {\n    let newEmployeeList = this.state.employeeList.sort((a, b) => a.name[colName].localeCompare(b.name[colName]));\n\n    this.setState({\n      employeeList: newEmployeeList\n    })\n  }\n\n\n\n  componentDidMount() {\n    Api.getRandomPeople().then(results => {\n      console.log(\"hello\", results)\n      this.setState({\n        employeeList: results.data.results,\n        originalList: results.data.results\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Search search={this.state.search} handleInputChange={this.handleInputChange} />\n        <Table employeeList={this.state.employeeList} handleOnSubmit={this.handleOnSubmit}/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}